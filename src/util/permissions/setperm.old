const types = ['user', 'role', 'channeluser', 'channelrole', 'everyone'];
const Command = require('../../util/core/Command');

module.exports = class SetPerm extends Command {

    constructor(client) {
        super(client, {
            name: 'setperm',
            description: 'Assigns a permission to a provided option.',
            usage: '<user|role> <permission>',
            requiredPerms: ['`core:core.manageperm`'],
            guildOnly: true
        });
    }

    hasPermission(message) {
        return FoxClient.isOwner(message.author.id) || message.guild.perms.check('core.manageperm');
    }

    async run(message, args) {
        const type = args[0];
        if (!type) return message.send({ embed: { title: 'Usage:', description: 'Role: **setperm role <permission> <rolename>**\n\nUser: **setperm user <permission> @user**', color: this.client.brandColor, timestamp: Date.now() } });
        if (!types.includes(type)) return message.send({ embed: { color: this.client.brandColor, description: `Available types: ${types.join(', ')}` } });

        switch (type) {
        case 'role': {
            const roleperm = args[1];
            if (!roleperm) return message.reply(`Sorry, but you didn't specify a permission.`);
            if (!message.guild.permissions) return message.reply(`Please run ${message.guild.commandPrefix}initperm in a guild channel to get started.`);
            const permCheck = message.guild.permissions.get(roleperm);
            if (!permCheck) return message.reply('That wasn\'t a valid permission, please try again.');
            const role = message.guild.roles.find('name', args.slice(2).join(' ')) || message.mentions.roles.first() || message.guild.roles.get(args[2]);
            if (!role) return message.reply('Sorry, that wasn\'t a valid role.');
            const res = await message.member.perm.add(roleperm, role.id, message);
            if (!res) return message.error(' This member already has that permission.');
            message.send({ embed: { author: { name: 'Set Permission', icon_url: this.client.user.displayAvatarURL() }, description: `Successfully assigned \`${roleperm}\` to the role **${role.name}**.`, timestamp: Date.now(), color: this.client.brandColor } });
            break;
        }
        case 'user': {
            const userperm = args[1];
            if (!userperm) return message.reply(`Sorry, but you didn't specify a permission.`);
            const pCheck = message.guild.permissions.get(userperm);
            if (!pCheck) return message.reply('That wasn\'t a valid permission, please try again.');
            const user = this.client.users.find('username', args.slice(2).join(' ')) || message.mentions.users.first() || this.client.users.get(args[2]);
            if (!user) return message.reply('Sorry, that wasn\'t a valid user.');

            const res = await message.member.perm.add(userperm, message.guild.id + user.id, message);
            if (!res) return message.error(' This member already has that permission.');
            message.send({ embed: { author: { name: 'Set Permission', icon_url: this.client.user.displayAvatarURL() }, description: `Successfully assigned \`${userperm}\` to the user **${user.username}**.`, timestamp: Date.now(), color: this.client.brandColor } });
            break;
        }
        case 'channelrole': {
            const channelrole = args[1];
            if (!channelrole) return message.reply(`Sorry, but you didn't specify a permission.`);
            const rCheck = message.guild.permissions.get(channelrole);
            if (!rCheck) return message.reply('That wasn\'t a valid permission, please try again.');
            const chrole = message.guild.roles.find('name', args.slice(2).join(' ')) || message.mentions.roles.first() || message.guild.roles.get(args[2]);
            if (!chrole) return message.reply('Sorry, that wasn\'t a valid user.');
            const resrole = await message.member.perm.add(channelrole, message.channel.id + chrole.id, message);
            if (!resrole) return message.error(' This member already has that permission.');
            message.send({ embed: { author: { name: 'Set Permission', icon_url: this.client.user.displayAvatarURL() }, description: `Successfully assigned \`${channelrole}\` to the role ${chrole} in ${message.channel}.`, timestamp: Date.now(), color: this.client.brandColor } });
            break;
        }
        case 'channeluser': {
            const channeluser = args[1];
            if (!channeluser) return message.reply(`Sorry, but you didn't specify a permission.`);
            const userCheck = message.guild.permissions.get(channeluser);
            if (!userCheck) return message.reply('That wasn\'t a valid permission, please try again.');
            const chuser = this.client.users.find('username', args.slice(2).join(' ')) || message.mentions.users.first() || this.client.users.get(args[2]);
            if (!chuser) return message.reply('Sorry, that wasn\'t a valid user.');

            const userres = await message.member.perm.add(channeluser, message.channel.id + chuser.id, message);
            if (!userres) return message.error(' This member already has that permission.');
            message.send({ embed: { author: { name: 'Set Permission', icon_url: this.client.user.displayAvatarURL() }, description: `Successfully assigned \`${channeluser}\` to the user **${chuser.username}** in ${message.channel}.`, timestamp: Date.now(), color: this.client.brandColor } });
            break;
        }
        case 'everyone': {
            const ev = args[1];
            if (!ev) return message.reply(`Sorry, but you didn't specify a permission.`);
            const eCheck = message.guild.permissions.get(ev);
            if (!eCheck) return message.reply('That wasn\'t a valid permission, please try again.');
            const evres = await message.member.perm.add(ev, message.guild.defaultRole.id, message);
            if (!evres) return message.error(' The whole server does not have that permission.');
            message.send({ embed: { author: { name: 'Set Permission', icon_url: this.client.user.displayAvatarURL() }, description: `Successfully assigned \`${ev}\` to the whole server.`, timestamp: Date.now(), color: this.client.brandColor } });
            break;
        }
        }
    }

};
